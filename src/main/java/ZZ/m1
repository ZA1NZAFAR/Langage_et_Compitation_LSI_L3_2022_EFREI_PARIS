
//        ArrayList<Rule> grammar = new ArrayList<>();
//        grammar.add(new Rule("E", List.of("T", "R")));
//        grammar.add(new Rule("R", List.of("+", "T", "R")));
//        grammar.add(new Rule("R", List.of("eps")));
//        grammar.add(new Rule("T", List.of("F", "Y")));
//        grammar.add(new Rule("Y", List.of("*", "F", "Y")));
//        grammar.add(new Rule("Y", List.of("eps")));
//        grammar.add(new Rule("F", List.of("(", "E", ")")));
//        grammar.add(new Rule("F", List.of("i")));
//
//        ArrayList<Rule> grammar2 = new ArrayList<>();
//        grammar2.add(new Rule("S", List.of("S", "A", "B", "C")));
//        grammar2.add(new Rule("S", List.of("n")));
//        grammar2.add(new Rule("A", List.of("a", "A")));
//        grammar2.add(new Rule("A", List.of("#")));
//        grammar2.add(new Rule("B", List.of("b", "B")));
//        grammar2.add(new Rule("B", List.of("c", "B")));
//        grammar2.add(new Rule("B", List.of("#")));
//        grammar2.add(new Rule("C", List.of("d", "C")));
//        grammar2.add(new Rule("C", List.of("d", "A")));

//        System.out.println(helper.derecursivation(grammar2));


//        Map<String, Set<String>> firsts = new HashMap<>();

//        for (Rule rule : grammar2) {
//            firsts.put(rule.getLeft(), helper.calculateFirsts(rule.left, grammar2));
//        }
//        System.out.println(firsts);





//        S -> SABC | n
//A -> aA | #
//B -> bB | cB | #
//C -> dC | da | dA